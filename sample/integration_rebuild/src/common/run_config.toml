###################################################################################################
# Configuration
#   - This file is organized differently than the configuration for the main prototype
#   - Settings are structured by TOML tables (e.g. [modules])
#   - For each tech in techs, an instance of LowRes is created. Unfortunately, these two likely need
#     to stay set as true for no bugs or issues. This structure is still under development


[modules]
HighRes = true
LowRes = true

[scales]
years = [2020, 2030, 2040, 2050]
regions = [2,4,6,7,15,25]
techs = [7,8,9,10,11,12,13]

[main_options]
return_model = false
save_tolerance = true

# Choices for combination solves
[solve_options]
force_10 = false
tol = 0.05
tol_method = "all"
max_iter = 12
tee = false
persistent = false

###################################################################################################
# Integration

[integration]

#####
# Crosswalks
#   - Specify a filename for a specific crosswalk "dimension"; in this case, the dimension is time,
#       the filename is crosswalk.csv, and the base_unit (see src/interchange for more details) is
#       hour.
#   - Any other crosswalk added here (which creates a new dimension in interchange) should take the format
#       {NAME}.filename = "FILE LOCATED IN src/interchange/crosswalks"
#       {NAME}.base_unit = "NAME OF BASE UNIT LOCATED IN CROSSWALKS FILE"
#   - If no base unit provided, settings will default to the left-most column of the crosswalk file

[integration.crosswalks]
time.filename = "crosswalk.csv"
time.base_unit = "hour"

#####
# Options
#   - solve_method: ["gauss-seidel"]
#   - Currently built for "gauss-seidel" only

[integration.options]
solve_method = "gauss-seidel"

#####
# Duals
#   - Describes the passing of information from module to module upon solve
#   - From class and component pushed to anther class and component. Exchange is conducted for ALL
#       instances of each from_class and to_class
#   - Components need to be valid, constructed components of any instance of class described
#   - Any other integration specification should take the form:
#       {NAME}.doc = "STRING DESCRIBING THE MODEL COUPLING"
#       {NAME}.from_class = "CLASS NAME"
#       {NAME}.from_component = "COMPONENT IN CLASS"
#       {NAME}.to_class = "CLASS NAME"
#       {NAME}.to_component = "COMPONENT IN CLASS"

[integration.dual]
output_price.doc = "Transport and storage-inclusive costs for each technology represent costs for generation in HighRes model"
output_price.from_class = "LowRes"
output_price.from_component = "market_clearing"
output_price.to_class = "HighRes"
output_price.to_component = "cost"




